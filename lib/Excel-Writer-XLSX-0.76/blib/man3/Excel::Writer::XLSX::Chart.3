.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Excel::Writer::XLSX::Chart 3"
.TH Excel::Writer::XLSX::Chart 3 "2014-01-01" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Chart \- A class for writing Excel Charts.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
To create a simple Excel file with a chart using Excel::Writer::XLSX:
.PP
.Vb 1
\&    #!/usr/bin/perl
.Ve
.PP
.Vb 3
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
.Ve
.PP
.Vb 2
\&    my $workbook  = Excel::Writer::XLSX->new( 'chart.xlsx' );
\&    my $worksheet = $workbook->add_worksheet();
.Ve
.PP
.Vb 4
\&    # Add the worksheet data the chart refers to.
\&    my $data = [
\&        [ 'Category', 2, 3, 4, 5, 6, 7 ],
\&        [ 'Value',    1, 4, 5, 2, 1, 5 ],
.Ve
.PP
.Vb 1
\&    ];
.Ve
.PP
.Vb 1
\&    $worksheet->write( 'A1', $data );
.Ve
.PP
.Vb 2
\&    # Add a worksheet chart.
\&    my $chart = $workbook->add_chart( type => 'column' );
.Ve
.PP
.Vb 5
\&    # Configure the chart.
\&    $chart->add_series(
\&        categories => '=Sheet1!$A$2:$A$7',
\&        values     => '=Sheet1!$B$2:$B$7',
\&    );
.Ve
.PP
.Vb 1
\&    __END__
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Chart\*(C'\fR module is an abstract base class for modules that implement charts in Excel::Writer::XLSX. The information below is applicable to all of the available subclasses.
.PP
The \f(CW\*(C`Chart\*(C'\fR module isn't used directly. A chart object is created via the Workbook \f(CW\*(C`add_chart()\*(C'\fR method where the chart type is specified:
.PP
.Vb 1
\&    my $chart = $workbook->add_chart( type => 'column' );
.Ve
.PP
Currently the supported chart types are:
.ie n .IP "* ""area""" 4
.el .IP "* \f(CWarea\fR" 4
.IX Item "area"
Creates an Area (filled line) style chart. See Excel::Writer::XLSX::Chart::Area.
.ie n .IP "* ""bar""" 4
.el .IP "* \f(CWbar\fR" 4
.IX Item "bar"
Creates a Bar style (transposed histogram) chart. See Excel::Writer::XLSX::Chart::Bar.
.ie n .IP "* ""column""" 4
.el .IP "* \f(CWcolumn\fR" 4
.IX Item "column"
Creates a column style (histogram) chart. See Excel::Writer::XLSX::Chart::Column.
.ie n .IP "* ""line""" 4
.el .IP "* \f(CWline\fR" 4
.IX Item "line"
Creates a Line style chart. See Excel::Writer::XLSX::Chart::Line.
.ie n .IP "* ""pie""" 4
.el .IP "* \f(CWpie\fR" 4
.IX Item "pie"
Creates a Pie style chart. See Excel::Writer::XLSX::Chart::Pie.
.ie n .IP "* ""scatter""" 4
.el .IP "* \f(CWscatter\fR" 4
.IX Item "scatter"
Creates a Scatter style chart. See Excel::Writer::XLSX::Chart::Scatter.
.ie n .IP "* ""stock""" 4
.el .IP "* \f(CWstock\fR" 4
.IX Item "stock"
Creates a Stock style chart. See Excel::Writer::XLSX::Chart::Stock.
.ie n .IP "* ""radar""" 4
.el .IP "* \f(CWradar\fR" 4
.IX Item "radar"
Creates a Radar style chart. See Excel::Writer::XLSX::Chart::Radar.
.PP
Chart subtypes are also supported in some cases:
.PP
.Vb 1
\&    $workbook->add_chart( type => 'bar', subtype => 'stacked' );
.Ve
.PP
The currently available subtypes are:
.PP
.Vb 3
\&    area
\&        stacked
\&        percent_stacked
.Ve
.PP
.Vb 3
\&    bar
\&        stacked
\&        percent_stacked
.Ve
.PP
.Vb 3
\&    column
\&        stacked
\&        percent_stacked
.Ve
.PP
.Vb 5
\&    scatter
\&        straight_with_markers
\&        straight
\&        smooth_with_markers
\&        smooth
.Ve
.PP
.Vb 3
\&    radar
\&        with_markers
\&        filled
.Ve
.PP
More charts and sub-types will be supported in time. See the \*(L"\s-1TODO\s0\*(R" section.
.SH "CHART METHODS"
.IX Header "CHART METHODS"
Methods that are common to all chart types are documented below. See the documentation for each of the above chart modules for chart specific information.
.Sh "\fIadd_series()\fP"
.IX Subsection "add_series()"
In an Excel chart a \*(L"series\*(R" is a collection of information such as values, X axis labels and the formatting that define which data is plotted.
.PP
With an Excel::Writer::XLSX chart object the \f(CW\*(C`add_series()\*(C'\fR method is used to set the properties for a series:
.PP
.Vb 5
\&    $chart->add_series(
\&        categories => '=Sheet1!$A$2:$A$10', # Optional.
\&        values     => '=Sheet1!$B$2:$B$10', # Required.
\&        line       => { color => 'blue' },
\&    );
.Ve
.PP
The properties that can be set are:
.ie n .IP "* ""values""" 4
.el .IP "* \f(CWvalues\fR" 4
.IX Item "values"
This is the most important property of a series and must be set for every chart object. It links the chart with the worksheet data that it displays. A formula or array ref can be used for the data range, see below.
.ie n .IP "* ""categories""" 4
.el .IP "* \f(CWcategories\fR" 4
.IX Item "categories"
This sets the chart category labels. The category is more or less the same as the X axis. In most chart types the \f(CW\*(C`categories\*(C'\fR property is optional and the chart will just assume a sequential series from \f(CW\*(C`1 .. n\*(C'\fR.
.ie n .IP "* ""name""" 4
.el .IP "* \f(CWname\fR" 4
.IX Item "name"
Set the name for the series. The name is displayed in the chart legend and in the formula bar. The name property is optional and if it isn't supplied it will default to \f(CW\*(C`Series 1 .. n\*(C'\fR.
.ie n .IP "* ""line""" 4
.el .IP "* \f(CWline\fR" 4
.IX Item "line"
Set the properties of the series line type such as colour and width. See the \*(L"\s-1CHART\s0 \s-1FORMATTING\s0\*(R" section below.
.ie n .IP "* ""border""" 4
.el .IP "* \f(CWborder\fR" 4
.IX Item "border"
Set the border properties of the series such as colour and style. See the \*(L"\s-1CHART\s0 \s-1FORMATTING\s0\*(R" section below.
.ie n .IP "* ""fill""" 4
.el .IP "* \f(CWfill\fR" 4
.IX Item "fill"
Set the fill properties of the series such as colour. See the \*(L"\s-1CHART\s0 \s-1FORMATTING\s0\*(R" section below.
.ie n .IP "* ""marker""" 4
.el .IP "* \f(CWmarker\fR" 4
.IX Item "marker"
Set the properties of the series marker such as style and colour. See the \*(L"\s-1SERIES\s0 \s-1OPTIONS\s0\*(R" section below.
.ie n .IP "* ""trendline""" 4
.el .IP "* \f(CWtrendline\fR" 4
.IX Item "trendline"
Set the properties of the series trendline such as linear, polynomial and moving average types. See the \*(L"\s-1SERIES\s0 \s-1OPTIONS\s0\*(R" section below.
.ie n .IP "* ""smooth""" 4
.el .IP "* \f(CWsmooth\fR" 4
.IX Item "smooth"
The \f(CW\*(C`smooth\*(C'\fR option is used to set the smooth property of a line series. See the \*(L"\s-1SERIES\s0 \s-1OPTIONS\s0\*(R" section below.
.ie n .IP "* ""y_error_bars""" 4
.el .IP "* \f(CWy_error_bars\fR" 4
.IX Item "y_error_bars"
Set vertical error bounds for a chart series. See the \*(L"\s-1SERIES\s0 \s-1OPTIONS\s0\*(R" section below.
.ie n .IP "* ""x_error_bars""" 4
.el .IP "* \f(CWx_error_bars\fR" 4
.IX Item "x_error_bars"
Set horizontal error bounds for a chart series. See the \*(L"\s-1SERIES\s0 \s-1OPTIONS\s0\*(R" section below.
.ie n .IP "* ""data_labels""" 4
.el .IP "* \f(CWdata_labels\fR" 4
.IX Item "data_labels"
Set data labels for the series. See the \*(L"\s-1SERIES\s0 \s-1OPTIONS\s0\*(R" section below.
.ie n .IP "* ""points""" 4
.el .IP "* \f(CWpoints\fR" 4
.IX Item "points"
Set properties for individual points in a series. See the \*(L"\s-1SERIES\s0 \s-1OPTIONS\s0\*(R" section below.
.ie n .IP "* ""invert_if_negative""" 4
.el .IP "* \f(CWinvert_if_negative\fR" 4
.IX Item "invert_if_negative"
Invert the fill colour for negative values. Usually only applicable to column and bar charts.
.ie n .IP "* ""overlap""" 4
.el .IP "* \f(CWoverlap\fR" 4
.IX Item "overlap"
Set the overlap between series in a Bar/Column chart. The range is +/\- 100. Default is 0.
.Sp
.Vb 1
\&    overlap => 20,
.Ve
.Sp
Note, it is only necessary to apply this property to one series of the chart.
.ie n .IP "* ""gap""" 4
.el .IP "* \f(CWgap\fR" 4
.IX Item "gap"
Set the gap between series in a Bar/Column chart. The range is 0 to 500. Default is 150.
.Sp
.Vb 1
\&    gap => 200,
.Ve
.Sp
Note, it is only necessary to apply this property to one series of the chart.
.PP
The \f(CW\*(C`categories\*(C'\fR and \f(CW\*(C`values\*(C'\fR can take either a range formula such as \f(CW\*(C`=Sheet1!$A$2:$A$7\*(C'\fR or, more usefully when generating the range programmatically, an array ref with zero indexed row/column values:
.PP
.Vb 1
\&     [ $sheetname, $row_start, $row_end, $col_start, $col_end ]
.Ve
.PP
The following are equivalent:
.PP
.Vb 2
\&    $chart->add_series( categories => '=Sheet1!$A$2:$A$7'      ); # Same as ...
\&    $chart->add_series( categories => [ 'Sheet1', 1, 6, 0, 0 ] ); # Zero-indexed.
.Ve
.PP
You can add more than one series to a chart. In fact, some chart types such as \f(CW\*(C`stock\*(C'\fR require it. The series numbering and order in the Excel chart will be the same as the order in which they are added in Excel::Writer::XLSX.
.PP
.Vb 6
\&    # Add the first series.
\&    $chart->add_series(
\&        categories => '=Sheet1!$A$2:$A$7',
\&        values     => '=Sheet1!$B$2:$B$7',
\&        name       => 'Test data series 1',
\&    );
.Ve
.PP
.Vb 6
\&    # Add another series. Same categories. Different range values.
\&    $chart->add_series(
\&        categories => '=Sheet1!$A$2:$A$7',
\&        values     => '=Sheet1!$C$2:$C$7',
\&        name       => 'Test data series 2',
\&    );
.Ve
.PP
It is also possible to specify non-contiguous ranges:
.PP
.Vb 4
\&    $chart->add_series(
\&        categories      => '=(Sheet1!$A$1:$A$9,Sheet1!$A$14:$A$25)',
\&        values          => '=(Sheet1!$B$1:$B$9,Sheet1!$B$14:$B$25)',
\&    );
.Ve
.Sh "\fIset_x_axis()\fP"
.IX Subsection "set_x_axis()"
The \f(CW\*(C`set_x_axis()\*(C'\fR method is used to set properties of the X axis.
.PP
.Vb 1
\&    $chart->set_x_axis( name => 'Quarterly results' );
.Ve
.PP
The properties that can be set are:
.PP
.Vb 21
\&    name
\&    name_font
\&    name_layout
\&    num_font
\&    num_format
\&    min
\&    max
\&    minor_unit
\&    major_unit
\&    interval_unit
\&    crossing
\&    reverse
\&    position_axis
\&    log_base
\&    label_position
\&    major_gridlines
\&    minor_gridlines
\&    visible
\&    date_axis
\&    minor_unit_type
\&    major_unit_type
.Ve
.PP
These are explained below. Some properties are only applicable to value or category axes, as indicated. See \*(L"Value and Category Axes\*(R" for an explanation of Excel's distinction between the axis types.
.ie n .IP "* ""name""" 4
.el .IP "* \f(CWname\fR" 4
.IX Item "name"
Set the name (title or caption) for the axis. The name is displayed below the X axis. The \f(CW\*(C`name\*(C'\fR property is optional. The default is to have no axis name. (Applicable to category and value axes).
.Sp
.Vb 1
\&    $chart->set_x_axis( name => 'Quarterly results' );
.Ve
.Sp
The name can also be a formula such as \f(CW\*(C`=Sheet1!$A$1\*(C'\fR.
.ie n .IP "* ""name_font""" 4
.el .IP "* \f(CWname_font\fR" 4
.IX Item "name_font"
Set the font properties for the axis title. (Applicable to category and value axes).
.Sp
.Vb 1
\&    $chart->set_x_axis( name_font => { name => 'Arial', size => 10 } );
.Ve
.ie n .IP "* ""name_layout""" 4
.el .IP "* \f(CWname_layout\fR" 4
.IX Item "name_layout"
Set the \f(CW\*(C`(x, y)\*(C'\fR position of the axis caption in chart relative units. (Applicable to category and value axes).
.Sp
.Vb 7
\&    $chart->set_x_axis(
\&        name        => 'X axis',
\&        name_layout => {
\&            x => 0.34,
\&            y => 0.85,
\&        }
\&    );
.Ve
.Sp
See the \*(L"\s-1CHART\s0 \s-1LAYOUT\s0\*(R" section below.
.ie n .IP "* ""num_font""" 4
.el .IP "* \f(CWnum_font\fR" 4
.IX Item "num_font"
Set the font properties for the axis numbers. (Applicable to category and value axes).
.Sp
.Vb 1
\&    $chart->set_x_axis( num_font => { bold => 1, italic => 1 } );
.Ve
.Sp
See the \*(L"\s-1CHART\s0 \s-1FONTS\s0\*(R" section below.
.ie n .IP "* ""num_format""" 4
.el .IP "* \f(CWnum_format\fR" 4
.IX Item "num_format"
Set the number format for the axis. (Applicable to category and value axes).
.Sp
.Vb 2
\&    $chart->set_x_axis( num_format => '#,##0.00' );
\&    $chart->set_y_axis( num_format => '0.00%'    );
.Ve
.Sp
The number format is similar to the Worksheet Cell Format \f(CW\*(C`num_format\*(C'\fR apart from the fact that a format index cannot be used. The explicit format string must be used as show above. See \*(L"\fIset_num_format()\fR\*(R" in Excel::Writer::XLSX for more information.
.ie n .IP "* ""min""" 4
.el .IP "* \f(CWmin\fR" 4
.IX Item "min"
Set the minimum value for the axis range. (Applicable to value axes only.)
.Sp
.Vb 1
\&    $chart->set_x_axis( min => 20 );
.Ve
.ie n .IP "* ""max""" 4
.el .IP "* \f(CWmax\fR" 4
.IX Item "max"
Set the maximum value for the axis range. (Applicable to value axes only.)
.Sp
.Vb 1
\&    $chart->set_x_axis( max => 80 );
.Ve
.ie n .IP "* ""minor_unit""" 4
.el .IP "* \f(CWminor_unit\fR" 4
.IX Item "minor_unit"
Set the increment of the minor units in the axis range. (Applicable to value axes only.)
.Sp
.Vb 1
\&    $chart->set_x_axis( minor_unit => 0.4 );
.Ve
.ie n .IP "* ""major_unit""" 4
.el .IP "* \f(CWmajor_unit\fR" 4
.IX Item "major_unit"
Set the increment of the major units in the axis range. (Applicable to value axes only.)
.Sp
.Vb 1
\&    $chart->set_x_axis( major_unit => 2 );
.Ve
.ie n .IP "* ""interval_unit""" 4
.el .IP "* \f(CWinterval_unit\fR" 4
.IX Item "interval_unit"
Set the interval unit for a category axis. (Applicable to category axes only.)
.Sp
.Vb 1
\&    $chart->set_x_axis( interval_unit => 2 );
.Ve
.ie n .IP "* ""crossing""" 4
.el .IP "* \f(CWcrossing\fR" 4
.IX Item "crossing"
Set the position where the y axis will cross the x axis. (Applicable to category and value axes.)
.Sp
The \f(CW\*(C`crossing\*(C'\fR value can either be the string \f(CW'max'\fR to set the crossing at the maximum axis value or a numeric value.
.Sp
.Vb 3
\&    $chart->set_x_axis( crossing => 3 );
\&    # or
\&    $chart->set_x_axis( crossing => 'max' );
.Ve
.Sp
\&\fBFor category axes the numeric value must be an integer\fR to represent the category number that the axis crosses at. For value axes it can have any value associated with the axis.
.Sp
If crossing is omitted (the default) the crossing will be set automatically by Excel based on the chart data.
.ie n .IP "* ""position_axis""" 4
.el .IP "* \f(CWposition_axis\fR" 4
.IX Item "position_axis"
Position the axis on or between the axis tick marks. (Applicable to category axes only.)
.Sp
There are two allowable values \f(CW\*(C`on_tick\*(C'\fR and \f(CW\*(C`between\*(C'\fR:
.Sp
.Vb 2
\&    $chart->set_x_axis( position_axis => 'on_tick' );
\&    $chart->set_x_axis( position_axis => 'between' );
.Ve
.ie n .IP "* ""reverse""" 4
.el .IP "* \f(CWreverse\fR" 4
.IX Item "reverse"
Reverse the order of the axis categories or values. (Applicable to category and value axes.)
.Sp
.Vb 1
\&    $chart->set_x_axis( reverse => 1 );
.Ve
.ie n .IP "* ""log_base""" 4
.el .IP "* \f(CWlog_base\fR" 4
.IX Item "log_base"
Set the log base of the axis range. (Applicable to value axes only.)
.Sp
.Vb 1
\&    $chart->set_x_axis( log_base => 10 );
.Ve
.ie n .IP "* ""label_position""" 4
.el .IP "* \f(CWlabel_position\fR" 4
.IX Item "label_position"
Set the \*(L"Axis labels\*(R" position for the axis. The following positions are available:
.Sp
.Vb 4
\&    next_to (the default)
\&    high
\&    low
\&    none
.Ve
.ie n .IP "* ""major_gridlines""" 4
.el .IP "* \f(CWmajor_gridlines\fR" 4
.IX Item "major_gridlines"
Configure the major gridlines for the axis. The available properties are:
.Sp
.Vb 2
\&    visible
\&    line
.Ve
.Sp
For example:
.Sp
.Vb 6
\&    $chart->set_x_axis(
\&        major_gridlines => {
\&            visible => 1,
\&            line    => { color => 'red', width => 1.25, dash_type => 'dash' }
\&        }
\&    );
.Ve
.Sp
The \f(CW\*(C`visible\*(C'\fR property is usually on for the X\-axis but it depends on the type of chart.
.Sp
The \f(CW\*(C`line\*(C'\fR property sets the gridline properties such as colour and width. See the \*(L"\s-1CHART\s0 \s-1FORMATTING\s0\*(R" section below.
.ie n .IP "* ""minor_gridlines""" 4
.el .IP "* \f(CWminor_gridlines\fR" 4
.IX Item "minor_gridlines"
This takes the same options as \f(CW\*(C`major_gridlines\*(C'\fR above.
.Sp
The minor gridline \f(CW\*(C`visible\*(C'\fR property is off by default for all chart types.
.ie n .IP "* ""visible""" 4
.el .IP "* \f(CWvisible\fR" 4
.IX Item "visible"
Configure the visibility of the axis.
.Sp
.Vb 1
\&    $chart->set_x_axis( visible => 0 );
.Ve
.ie n .IP "* ""date_axis""" 4
.el .IP "* \f(CWdate_axis\fR" 4
.IX Item "date_axis"
This option is used to treat a category axis with date or time data as a Date Axis. (Applicable to category axes only.)
.Sp
.Vb 1
\&    $chart->set_x_axis( date_axis => 1 );
.Ve
.Sp
This option also allows you to set \f(CW\*(C`max\*(C'\fR and \f(CW\*(C`min\*(C'\fR values for a category axis which isn't allowed by Excel for non-date category axes.
.Sp
See \*(L"Date Category Axes\*(R" for more details.
.ie n .IP "* ""minor_unit_type""" 4
.el .IP "* \f(CWminor_unit_type\fR" 4
.IX Item "minor_unit_type"
For \f(CW\*(C`date_axis\*(C'\fR axes, see above, this option is used to set the type of the minor units. (Applicable to date category axes only.)
.Sp
.Vb 5
\&    $chart->set_x_axis(
\&        date_axis         => 1,
\&        minor_unit        => 4,
\&        minor_unit_type   => 'months',
\&    );
.Ve
.Sp
The allowable values for this option are \f(CW\*(C`days\*(C'\fR, \f(CW\*(C`months\*(C'\fR and \f(CW\*(C`years\*(C'\fR.
.ie n .IP "* ""major_unit_type""" 4
.el .IP "* \f(CWmajor_unit_type\fR" 4
.IX Item "major_unit_type"
Same as \f(CW\*(C`minor_unit_type\*(C'\fR, see above, but for major axes unit types.
.PP
More than one property can be set in a call to \f(CW\*(C`set_x_axis()\*(C'\fR:
.PP
.Vb 5
\&    $chart->set_x_axis(
\&        name => 'Quarterly results',
\&        min  => 10,
\&        max  => 80,
\&    );
.Ve
.Sh "\fIset_y_axis()\fP"
.IX Subsection "set_y_axis()"
The \f(CW\*(C`set_y_axis()\*(C'\fR method is used to set properties of the Y axis. The properties that can be set are the same as for \f(CW\*(C`set_x_axis\*(C'\fR, see above.
.Sh "\fIset_x2_axis()\fP"
.IX Subsection "set_x2_axis()"
The \f(CW\*(C`set_x2_axis()\*(C'\fR method is used to set properties of the secondary X axis.
The properties that can be set are the same as for \f(CW\*(C`set_x_axis\*(C'\fR, see above.
The default properties for this axis are:
.PP
.Vb 3
\&    label_position => 'none',
\&    crossing       => 'max',
\&    visible        => 0,
.Ve
.Sh "\fIset_y2_axis()\fP"
.IX Subsection "set_y2_axis()"
The \f(CW\*(C`set_y2_axis()\*(C'\fR method is used to set properties of the secondary Y axis.
The properties that can be set are the same as for \f(CW\*(C`set_x_axis\*(C'\fR, see above.
The default properties for this axis are:
.PP
.Vb 1
\&    major_gridlines => { visible => 0 }
.Ve
.Sh "\fIset_size()\fP"
.IX Subsection "set_size()"
The \f(CW\*(C`set_size()\*(C'\fR method is used to set the dimensions of the chart. The size properties that can be set are:
.PP
.Vb 6
\&     width
\&     height
\&     x_scale
\&     y_scale
\&     x_offset
\&     y_offset
.Ve
.PP
The \f(CW\*(C`width\*(C'\fR and \f(CW\*(C`height\*(C'\fR are in pixels. The default chart width is 480 pixels and the default height is 288 pixels. The size of the chart can be modified by setting the \f(CW\*(C`width\*(C'\fR and \f(CW\*(C`height\*(C'\fR or by setting the \f(CW\*(C`x_scale\*(C'\fR and \f(CW\*(C`y_scale\*(C'\fR:
.PP
.Vb 1
\&    $chart->set_size( width => 720, height => 576 );
.Ve
.PP
.Vb 1
\&    # Same as:
.Ve
.PP
.Vb 1
\&    $chart->set_size( x_scale => 1.5, y_scale => 2 );
.Ve
.PP
The \f(CW\*(C`x_offset\*(C'\fR and \f(CW\*(C`y_offset\*(C'\fR position the top left corner of the chart in the cell that it is inserted into.
.PP
Note: the \f(CW\*(C`x_scale\*(C'\fR, \f(CW\*(C`y_scale\*(C'\fR, \f(CW\*(C`x_offset\*(C'\fR and \f(CW\*(C`y_offset\*(C'\fR parameters can also be set via the \f(CW\*(C`insert_chart()\*(C'\fR method:
.PP
.Vb 1
\&    $worksheet->insert_chart( 'E2', $chart, 2, 4, 1.5, 2 );
.Ve
.Sh "\fIset_title()\fP"
.IX Subsection "set_title()"
The \f(CW\*(C`set_title()\*(C'\fR method is used to set properties of the chart title.
.PP
.Vb 1
\&    $chart->set_title( name => 'Year End Results' );
.Ve
.PP
The properties that can be set are:
.ie n .IP "* ""name""" 4
.el .IP "* \f(CWname\fR" 4
.IX Item "name"
Set the name (title) for the chart. The name is displayed above the chart. The name can also be a formula such as \f(CW\*(C`=Sheet1!$A$1\*(C'\fR. The name property is optional. The default is to have no chart title.
.ie n .IP "* ""name_font""" 4
.el .IP "* \f(CWname_font\fR" 4
.IX Item "name_font"
Set the font properties for the chart title. See the \*(L"\s-1CHART\s0 \s-1FONTS\s0\*(R" section below.
.ie n .IP "* ""overlay""" 4
.el .IP "* \f(CWoverlay\fR" 4
.IX Item "overlay"
Allow the title to be overlaid on the chart. Generally used with the layout property below.
.ie n .IP "* ""layout""" 4
.el .IP "* \f(CWlayout\fR" 4
.IX Item "layout"
Set the \f(CW\*(C`(x, y)\*(C'\fR position of the title in chart relative units:
.Sp
.Vb 8
\&    $chart->set_title(
\&        name    => 'Title',
\&        overlay => 1,
\&        layout  => {
\&            x => 0.42,
\&            y => 0.14,
\&        }
\&    );
.Ve
.Sp
See the \*(L"\s-1CHART\s0 \s-1LAYOUT\s0\*(R" section below.
.ie n .IP "* ""none""" 4
.el .IP "* \f(CWnone\fR" 4
.IX Item "none"
By default Excel adds an automatic chart title to charts with a single series and a user defined series name. The \f(CW\*(C`none\*(C'\fR option turns this default title off. It also turns off all other \f(CW\*(C`set_title()\*(C'\fR options.
.Sp
.Vb 1
\&    $chart->set_title( none => 1 );
.Ve
.Sh "\fIset_legend()\fP"
.IX Subsection "set_legend()"
The \f(CW\*(C`set_legend()\*(C'\fR method is used to set properties of the chart legend.
.PP
The properties that can be set are:
.ie n .IP "* ""none""" 4
.el .IP "* \f(CWnone\fR" 4
.IX Item "none"
The \f(CW\*(C`none\*(C'\fR option turns off the chart legend. In Excel chart legends are on by default:
.Sp
.Vb 1
\&    $chart->set_legend( none => 1 );
.Ve
.Sp
Note, for backward compatibility, it is also possible to turn off the legend via the \f(CW\*(C`position\*(C'\fR property:
.Sp
.Vb 1
\&    $chart->set_legend( position => 'none' );
.Ve
.ie n .IP "* ""position""" 4
.el .IP "* \f(CWposition\fR" 4
.IX Item "position"
Set the position of the chart legend.
.Sp
.Vb 1
\&    $chart->set_legend( position => 'bottom' );
.Ve
.Sp
The default legend position is \f(CW\*(C`right\*(C'\fR. The available positions are:
.Sp
.Vb 7
\&    top
\&    bottom
\&    left
\&    right
\&    overlay_left
\&    overlay_right
\&    none
.Ve
.ie n .IP "* ""layout""" 4
.el .IP "* \f(CWlayout\fR" 4
.IX Item "layout"
Set the \f(CW\*(C`(x, y)\*(C'\fR position of the legend in chart relative units:
.Sp
.Vb 8
\&    $chart->set_legend(
\&        layout => {
\&            x      => 0.80,
\&            y      => 0.37,
\&            width  => 0.12,
\&            height => 0.25,
\&        }
\&    );
.Ve
.Sp
See the \*(L"\s-1CHART\s0 \s-1LAYOUT\s0\*(R" section below.
.ie n .IP "* ""delete_series""" 4
.el .IP "* \f(CWdelete_series\fR" 4
.IX Item "delete_series"
This allows you to remove 1 or more series from the the legend (the series will still display on the chart). This property takes an array ref as an argument and the series are zero indexed:
.Sp
.Vb 2
\&    # Delete/hide series index 0 and 2 from the legend.
\&    $chart->set_legend( delete_series => [0, 2] );
.Ve
.ie n .IP "* ""font""" 4
.el .IP "* \f(CWfont\fR" 4
.IX Item "font"
Set the font properties of the chart legend:
.Sp
.Vb 1
\&    $chart->set_legend( font => { bold => 1, italic => 1 } );
.Ve
.Sp
See the \*(L"\s-1CHART\s0 \s-1FONTS\s0\*(R" section below.
.Sh "\fIset_chartarea()\fP"
.IX Subsection "set_chartarea()"
The \f(CW\*(C`set_chartarea()\*(C'\fR method is used to set the properties of the chart area.
.PP
.Vb 4
\&    $chart->set_chartarea(
\&        border => { none  => 1 },
\&        fill   => { color => 'red' }
\&    );
.Ve
.PP
The properties that can be set are:
.ie n .IP "* ""border""" 4
.el .IP "* \f(CWborder\fR" 4
.IX Item "border"
Set the border properties of the chartarea such as colour and style. See the \*(L"\s-1CHART\s0 \s-1FORMATTING\s0\*(R" section below.
.ie n .IP "* ""fill""" 4
.el .IP "* \f(CWfill\fR" 4
.IX Item "fill"
Set the fill properties of the chartarea such as colour. See the \*(L"\s-1CHART\s0 \s-1FORMATTING\s0\*(R" section below.
.Sh "\fIset_plotarea()\fP"
.IX Subsection "set_plotarea()"
The \f(CW\*(C`set_plotarea()\*(C'\fR method is used to set properties of the plot area of a chart.
.PP
.Vb 4
\&    $chart->set_plotarea(
\&        border => { color => 'yellow', width => 1, dash_type => 'dash' },
\&        fill   => { color => '#92D050' }
\&    );
.Ve
.PP
The properties that can be set are:
.ie n .IP "* ""border""" 4
.el .IP "* \f(CWborder\fR" 4
.IX Item "border"
Set the border properties of the plotarea such as colour and style. See the \*(L"\s-1CHART\s0 \s-1FORMATTING\s0\*(R" section below.
.ie n .IP "* ""fill""" 4
.el .IP "* \f(CWfill\fR" 4
.IX Item "fill"
Set the fill properties of the plotarea such as colour. See the \*(L"\s-1CHART\s0 \s-1FORMATTING\s0\*(R" section below.
.ie n .IP "* ""layout""" 4
.el .IP "* \f(CWlayout\fR" 4
.IX Item "layout"
Set the \f(CW\*(C`(x, y)\*(C'\fR position of the plotarea in chart relative units:
.Sp
.Vb 8
\&    $chart->set_plotarea(
\&        layout => {
\&            x      => 0.35,
\&            y      => 0.26,
\&            width  => 0.62,
\&            height => 0.50,
\&        }
\&    );
.Ve
.Sp
See the \*(L"\s-1CHART\s0 \s-1LAYOUT\s0\*(R" section below.
.Sh "\fIset_style()\fP"
.IX Subsection "set_style()"
The \f(CW\*(C`set_style()\*(C'\fR method is used to set the style of the chart to one of the 42 built-in styles available on the 'Design' tab in Excel:
.PP
.Vb 1
\&    $chart->set_style( 4 );
.Ve
.PP
The default style is 2.
.Sh "\fIset_table()\fP"
.IX Subsection "set_table()"
The \f(CW\*(C`set_table()\*(C'\fR method adds a data table below the horizontal axis with the data used to plot the chart.
.PP
.Vb 1
\&    $chart->set_table();
.Ve
.PP
The available options, with default values are:
.PP
.Vb 4
\&    vertical   => 1,    # Display vertical lines in the table.
\&    horizontal => 1,    # Display horizontal lines in the table.
\&    outline    => 1,    # Display an outline in the table.
\&    show_keys  => 0     # Show the legend keys with the table data.
.Ve
.PP
The data table can only be shown with Bar, Column, Line, Area and stock charts.
.Sh "set_up_down_bars"
.IX Subsection "set_up_down_bars"
The \f(CW\*(C`set_up_down_bars()\*(C'\fR method adds Up-Down bars to Line charts to indicate the difference between the first and last data series.
.PP
.Vb 1
\&    $chart->set_up_down_bars();
.Ve
.PP
It is possible to format the up and down bars to add \f(CW\*(C`fill\*(C'\fR and \f(CW\*(C`border\*(C'\fR properties if required. See the \*(L"\s-1CHART\s0 \s-1FORMATTING\s0\*(R" section below.
.PP
.Vb 4
\&    $chart->set_up_down_bars(
\&        up   => { fill => { color => 'green' } },
\&        down => { fill => { color => 'red' } },
\&    );
.Ve
.PP
Up-down bars can only be applied to Line charts and to Stock charts (by default).
.Sh "set_drop_lines"
.IX Subsection "set_drop_lines"
The \f(CW\*(C`set_drop_lines()\*(C'\fR method adds Drop Lines to charts to show the Category value of points in the data.
.PP
.Vb 1
\&    $chart->set_drop_lines();
.Ve
.PP
It is possible to format the Drop Line \f(CW\*(C`line\*(C'\fR properties if required. See the \*(L"\s-1CHART\s0 \s-1FORMATTING\s0\*(R" section below.
.PP
.Vb 1
\&    $chart->set_drop_lines( line => { color => 'red', dash_type => 'square_dot' } );
.Ve
.PP
Drop Lines are only available in Line, Area and Stock charts.
.Sh "set_high_low_lines"
.IX Subsection "set_high_low_lines"
The \f(CW\*(C`set_high_low_lines()\*(C'\fR method adds High-Low lines to charts to show the maximum and minimum values of points in a Category.
.PP
.Vb 1
\&    $chart->set_high_low_lines();
.Ve
.PP
It is possible to format the High-Low Line \f(CW\*(C`line\*(C'\fR properties if required. See the \*(L"\s-1CHART\s0 \s-1FORMATTING\s0\*(R" section below.
.PP
.Vb 1
\&    $chart->set_high_low_lines( line => { color => 'red' } );
.Ve
.PP
High-Low Lines are only available in Line and Stock charts.
.Sh "\fIshow_blanks_as()\fP"
.IX Subsection "show_blanks_as()"
The \f(CW\*(C`show_blanks_as()\*(C'\fR method controls how blank data is displayed in a chart.
.PP
.Vb 1
\&    $chart->show_blanks_as( 'span' );
.Ve
.PP
The available options are:
.PP
.Vb 3
\&        gap    # Blank data is shown as a gap. The default.
\&        zero   # Blank data is displayed as zero.
\&        span   # Blank data is connected with a line.
.Ve
.Sh "\fIshow_hidden_data()\fP"
.IX Subsection "show_hidden_data()"
Display data in hidden rows or columns on the chart.
.PP
.Vb 1
\&    $chart->show_hidden_data();
.Ve
.SH "SERIES OPTIONS"
.IX Header "SERIES OPTIONS"
This section details the following properties of \f(CW\*(C`add_series()\*(C'\fR in more detail:
.PP
.Vb 7
\&    marker
\&    trendline
\&    y_error_bars
\&    x_error_bars
\&    data_labels
\&    points
\&    smooth
.Ve
.Sh "Marker"
.IX Subsection "Marker"
The marker format specifies the properties of the markers used to distinguish series on a chart. In general only Line and Scatter chart types and trendlines use markers.
.PP
The following properties can be set for \f(CW\*(C`marker\*(C'\fR formats in a chart.
.PP
.Vb 4
\&    type
\&    size
\&    border
\&    fill
.Ve
.PP
The \f(CW\*(C`type\*(C'\fR property sets the type of marker that is used with a series.
.PP
.Vb 4
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        marker     => { type => 'diamond' },
\&    );
.Ve
.PP
The following \f(CW\*(C`type\*(C'\fR properties can be set for \f(CW\*(C`marker\*(C'\fR formats in a chart. These are shown in the same order as in the Excel format dialog.
.PP
.Vb 11
\&    automatic
\&    none
\&    square
\&    diamond
\&    triangle
\&    x
\&    star
\&    short_dash
\&    long_dash
\&    circle
\&    plus
.Ve
.PP
The \f(CW\*(C`automatic\*(C'\fR type is a special case which turns on a marker using the default marker style for the particular series number.
.PP
.Vb 4
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        marker     => { type => 'automatic' },
\&    );
.Ve
.PP
If \f(CW\*(C`automatic\*(C'\fR is on then other marker properties such as size, border or fill cannot be set.
.PP
The \f(CW\*(C`size\*(C'\fR property sets the size of the marker and is generally used in conjunction with \f(CW\*(C`type\*(C'\fR.
.PP
.Vb 4
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        marker     => { type => 'diamond', size => 7 },
\&    );
.Ve
.PP
Nested \f(CW\*(C`border\*(C'\fR and \f(CW\*(C`fill\*(C'\fR properties can also be set for a marker. See the \*(L"\s-1CHART\s0 \s-1FORMATTING\s0\*(R" section below.
.PP
.Vb 9
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        marker     => {
\&            type    => 'square',
\&            size    => 5,
\&            border  => { color => 'red' },
\&            fill    => { color => 'yellow' },
\&        },
\&    );
.Ve
.Sh "Trendline"
.IX Subsection "Trendline"
A trendline can be added to a chart series to indicate trends in the data such as a moving average or a polynomial fit.
.PP
The following properties can be set for trendlines in a chart series.
.PP
.Vb 7
\&    type
\&    order       (for polynomial trends)
\&    period      (for moving average)
\&    forward     (for all except moving average)
\&    backward    (for all except moving average)
\&    name
\&    line
.Ve
.PP
The \f(CW\*(C`type\*(C'\fR property sets the type of trendline in the series.
.PP
.Vb 4
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        trendline  => { type => 'linear' },
\&    );
.Ve
.PP
The available \f(CW\*(C`trendline\*(C'\fR types are:
.PP
.Vb 6
\&    exponential
\&    linear
\&    log
\&    moving_average
\&    polynomial
\&    power
.Ve
.PP
A \f(CW\*(C`polynomial\*(C'\fR trendline can also specify the \f(CW\*(C`order\*(C'\fR of the polynomial. The default value is 2.
.PP
.Vb 7
\&    $chart->add_series(
\&        values    => '=Sheet1!$B$1:$B$5',
\&        trendline => {
\&            type  => 'polynomial',
\&            order => 3,
\&        },
\&    );
.Ve
.PP
A \f(CW\*(C`moving_average\*(C'\fR trendline can also specify the \f(CW\*(C`period\*(C'\fR of the moving average. The default value is 2.
.PP
.Vb 7
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        trendline  => {
\&            type   => 'moving_average',
\&            period => 3,
\&        },
\&    );
.Ve
.PP
The \f(CW\*(C`forward\*(C'\fR and \f(CW\*(C`backward\*(C'\fR properties set the forecast period of the trendline.
.PP
.Vb 8
\&    $chart->add_series(
\&        values    => '=Sheet1!$B$1:$B$5',
\&        trendline => {
\&            type     => 'linear',
\&            forward  => 0.5,
\&            backward => 0.5,
\&        },
\&    );
.Ve
.PP
The \f(CW\*(C`name\*(C'\fR property sets an optional name for the trendline that will appear in the chart legend. If it isn't specified the Excel default name will be displayed. This is usually a combination of the trendline type and the series name.
.PP
.Vb 7
\&    $chart->add_series(
\&        values    => '=Sheet1!$B$1:$B$5',
\&        trendline => {
\&            type => 'linear',
\&            name => 'Interpolated trend',
\&        },
\&    );
.Ve
.PP
Several of these properties can be set in one go:
.PP
.Vb 14
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        trendline  => {
\&            type     => 'linear',
\&            name     => 'My trend name',
\&            forward  => 0.5,
\&            backward => 0.5,
\&            line     => {
\&                color     => 'red',
\&                width     => 1,
\&                dash_type => 'long_dash',
\&            },
\&        },
\&    );
.Ve
.PP
Trendlines cannot be added to series in a stacked chart or pie chart, radar chart or (when implemented) to 3D, surface, or doughnut charts.
.Sh "Error Bars"
.IX Subsection "Error Bars"
Error bars can be added to a chart series to indicate error bounds in the data. The error bars can be vertical \f(CW\*(C`y_error_bars\*(C'\fR (the most common type) or horizontal \f(CW\*(C`x_error_bars\*(C'\fR (for Bar and Scatter charts only).
.PP
The following properties can be set for error bars in a chart series.
.PP
.Vb 7
\&    type
\&    value        (for all types except standard error and custom)
\&    plus_values  (for custom only)
\&    minus_values (for custom only)
\&    direction
\&    end_style
\&    line
.Ve
.PP
The \f(CW\*(C`type\*(C'\fR property sets the type of error bars in the series.
.PP
.Vb 4
\&    $chart->add_series(
\&        values       => '=Sheet1!$B$1:$B$5',
\&        y_error_bars => { type => 'standard_error' },
\&    );
.Ve
.PP
The available error bars types are available:
.PP
.Vb 5
\&    fixed
\&    percentage
\&    standard_deviation
\&    standard_error
\&    custom
.Ve
.PP
All error bar types, except for \f(CW\*(C`standard_error\*(C'\fR and \f(CW\*(C`custom\*(C'\fR must also have a value associated with it for the error bounds:
.PP
.Vb 7
\&    $chart->add_series(
\&        values       => '=Sheet1!$B$1:$B$5',
\&        y_error_bars => {
\&            type  => 'percentage',
\&            value => 5,
\&        },
\&    );
.Ve
.PP
The \f(CW\*(C`custom\*(C'\fR error bar type must specify \f(CW\*(C`plus_values\*(C'\fR and \f(CW\*(C`minus_values\*(C'\fR which should either by a \f(CW\*(C`Sheet1!$A$1:$A$5\*(C'\fR type range formula or an arrayref of
values:
.PP
.Vb 9
\&    $chart->add_series(
\&        categories   => '=Sheet1!$A$1:$A$5',
\&        values       => '=Sheet1!$B$1:$B$5',
\&        y_error_bars => {
\&            type         => 'custom',
\&            plus_values  => '=Sheet1!$C$1:$C$5',
\&            minus_values => '=Sheet1!$D$1:$D$5',
\&        },
\&    );
.Ve
.PP
.Vb 1
\&    # or
.Ve
.PP
.Vb 9
\&    $chart->add_series(
\&        categories   => '=Sheet1!$A$1:$A$5',
\&        values       => '=Sheet1!$B$1:$B$5',
\&        y_error_bars => {
\&            type         => 'custom',
\&            plus_values  => [1, 1, 1, 1, 1],
\&            minus_values => [2, 2, 2, 2, 2],
\&        },
\&    );
.Ve
.PP
Note, as in Excel the items in the \f(CW\*(C`minus_values\*(C'\fR do not need to be negative.
.PP
The \f(CW\*(C`direction\*(C'\fR property sets the direction of the error bars. It should be one of the following:
.PP
.Vb 3
\&    plus    # Positive direction only.
\&    minus   # Negative direction only.
\&    both    # Plus and minus directions, The default.
.Ve
.PP
The \f(CW\*(C`end_style\*(C'\fR property sets the style of the error bar end cap. The options are 1 (the default) or 0 (for no end cap):
.PP
.Vb 9
\&    $chart->add_series(
\&        values       => '=Sheet1!$B$1:$B$5',
\&        y_error_bars => {
\&            type      => 'fixed',
\&            value     => 2,
\&            end_style => 0,
\&            direction => 'minus'
\&        },
\&    );
.Ve
.Sh "Data Labels"
.IX Subsection "Data Labels"
Data labels can be added to a chart series to indicate the values of the plotted data points.
.PP
The following properties can be set for \f(CW\*(C`data_labels\*(C'\fR formats in a chart.
.PP
.Vb 6
\&    value
\&    category
\&    series_name
\&    position
\&    leader_lines
\&    percentage
.Ve
.PP
The \f(CW\*(C`value\*(C'\fR property turns on the \fIValue\fR data label for a series.
.PP
.Vb 4
\&    $chart->add_series(
\&        values      => '=Sheet1!$B$1:$B$5',
\&        data_labels => { value => 1 },
\&    );
.Ve
.PP
The \f(CW\*(C`category\*(C'\fR property turns on the \fICategory Name\fR data label for a series.
.PP
.Vb 4
\&    $chart->add_series(
\&        values      => '=Sheet1!$B$1:$B$5',
\&        data_labels => { category => 1 },
\&    );
.Ve
.PP
The \f(CW\*(C`series_name\*(C'\fR property turns on the \fISeries Name\fR data label for a series.
.PP
.Vb 4
\&    $chart->add_series(
\&        values      => '=Sheet1!$B$1:$B$5',
\&        data_labels => { series_name => 1 },
\&    );
.Ve
.PP
The \f(CW\*(C`position\*(C'\fR property is used to position the data label for a series.
.PP
.Vb 4
\&    $chart->add_series(
\&        values      => '=Sheet1!$B$1:$B$5',
\&        data_labels => { value => 1, position => 'center' },
\&    );
.Ve
.PP
Valid positions are:
.PP
.Vb 10
\&    center
\&    right
\&    left
\&    top
\&    bottom
\&    above           # Same as top
\&    below           # Same as bottom
\&    inside_end      # Pie chart mainly.
\&    outside_end     # Pie chart mainly.
\&    best_fit        # Pie chart mainly.
.Ve
.PP
The \f(CW\*(C`percentage\*(C'\fR property is used to turn on the display of data labels as a \fIPercentage\fR for a series. It is mainly used for pie charts.
.PP
.Vb 4
\&    $chart->add_series(
\&        values      => '=Sheet1!$B$1:$B$5',
\&        data_labels => { percentage => 1 },
\&    );
.Ve
.PP
The \f(CW\*(C`leader_lines\*(C'\fR property is used to turn on  \fILeader Lines\fR for the data label for a series. It is mainly used for pie charts.
.PP
.Vb 4
\&    $chart->add_series(
\&        values      => '=Sheet1!$B$1:$B$5',
\&        data_labels => { value => 1, leader_lines => 1 },
\&    );
.Ve
.PP
Note: Even when leader lines are turned on they aren't automatically visible in Excel or Excel::Writer::XLSX. Due to an Excel limitation (or design) leader lines only appear if the data label is moved manually or if the data labels are very close and need to be adjusted automatically.
.Sh "Points"
.IX Subsection "Points"
In general formatting is applied to an entire series in a chart. However, it is occasionally required to format individual points in a series. In particular this is required for Pie charts where each segment is represented by a point.
.PP
In these cases it is possible to use the \f(CW\*(C`points\*(C'\fR property of \f(CW\*(C`add_series()\*(C'\fR:
.PP
.Vb 8
\&    $chart->add_series(
\&        values => '=Sheet1!$A$1:$A$3',
\&        points => [
\&            { fill => { color => '#FF0000' } },
\&            { fill => { color => '#CC0000' } },
\&            { fill => { color => '#990000' } },
\&        ],
\&    );
.Ve
.PP
The \f(CW\*(C`points\*(C'\fR property takes an array ref of format options (see the \*(L"\s-1CHART\s0 \s-1FORMATTING\s0\*(R" section below). To assign default properties to points in a series pass \f(CW\*(C`undef\*(C'\fR values in the array ref:
.PP
.Vb 9
\&    # Format point 3 of 3 only.
\&    $chart->add_series(
\&        values => '=Sheet1!$A$1:$A$3',
\&        points => [
\&            undef,
\&            undef,
\&            { fill => { color => '#990000' } },
\&        ],
\&    );
.Ve
.PP
.Vb 5
\&    # Format the first point only.
\&    $chart->add_series(
\&        values => '=Sheet1!$A$1:$A$3',
\&        points => [ { fill => { color => '#FF0000' } } ],
\&    );
.Ve
.Sh "Smooth"
.IX Subsection "Smooth"
The \f(CW\*(C`smooth\*(C'\fR option is used to set the smooth property of a line series. It is only applicable to the \f(CW\*(C`Line\*(C'\fR and \f(CW\*(C`Scatter\*(C'\fR chart types.
.PP
.Vb 2
\&    $chart->add_series( values => '=Sheet1!$C$1:$C$5',
\&                        smooth => 1 );
.Ve
.SH "CHART FORMATTING"
.IX Header "CHART FORMATTING"
The following chart formatting properties can be set for any chart object that they apply to (and that are supported by Excel::Writer::XLSX) such as chart lines, column fill areas, plot area borders, markers, gridlines and other chart elements documented above.
.PP
.Vb 3
\&    line
\&    border
\&    fill
.Ve
.PP
Chart formatting properties are generally set using hash refs.
.PP
.Vb 4
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        line       => { color => 'blue' },
\&    );
.Ve
.PP
In some cases the format properties can be nested. For example a \f(CW\*(C`marker\*(C'\fR may contain \f(CW\*(C`border\*(C'\fR and \f(CW\*(C`fill\*(C'\fR sub\-properties.
.PP
.Vb 10
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        line       => { color => 'blue' },
\&        marker     => {
\&            type    => 'square',
\&            size    => 5,
\&            border  => { color => 'red' },
\&            fill    => { color => 'yellow' },
\&        },
\&    );
.Ve
.Sh "Line"
.IX Subsection "Line"
The line format is used to specify properties of line objects that appear in a chart such as a plotted line on a chart or a border.
.PP
The following properties can be set for \f(CW\*(C`line\*(C'\fR formats in a chart.
.PP
.Vb 4
\&    none
\&    color
\&    width
\&    dash_type
.Ve
.PP
The \f(CW\*(C`none\*(C'\fR property is uses to turn the \f(CW\*(C`line\*(C'\fR off (it is always on by default except in Scatter charts). This is useful if you wish to plot a series with markers but without a line.
.PP
.Vb 4
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        line       => { none => 1 },
\&    );
.Ve
.PP
The \f(CW\*(C`color\*(C'\fR property sets the color of the \f(CW\*(C`line\*(C'\fR.
.PP
.Vb 4
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        line       => { color => 'red' },
\&    );
.Ve
.PP
The available colours are shown in the main Excel::Writer::XLSX documentation. It is also possible to set the colour of a line with a \s-1HTML\s0 style \s-1RGB\s0 colour:
.PP
.Vb 3
\&    $chart->add_series(
\&        line       => { color => '#FF0000' },
\&    );
.Ve
.PP
The \f(CW\*(C`width\*(C'\fR property sets the width of the \f(CW\*(C`line\*(C'\fR. It should be specified in increments of 0.25 of a point as in Excel.
.PP
.Vb 4
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        line       => { width => 3.25 },
\&    );
.Ve
.PP
The \f(CW\*(C`dash_type\*(C'\fR property sets the dash style of the line.
.PP
.Vb 4
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        line       => { dash_type => 'dash_dot' },
\&    );
.Ve
.PP
The following \f(CW\*(C`dash_type\*(C'\fR values are available. They are shown in the order that they appear in the Excel dialog.
.PP
.Vb 8
\&    solid
\&    round_dot
\&    square_dot
\&    dash
\&    dash_dot
\&    long_dash
\&    long_dash_dot
\&    long_dash_dot_dot
.Ve
.PP
The default line style is \f(CW\*(C`solid\*(C'\fR.
.PP
More than one \f(CW\*(C`line\*(C'\fR property can be specified at a time:
.PP
.Vb 8
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        line       => {
\&            color     => 'red',
\&            width     => 1.25,
\&            dash_type => 'square_dot',
\&        },
\&    );
.Ve
.Sh "Border"
.IX Subsection "Border"
The \f(CW\*(C`border\*(C'\fR property is a synonym for \f(CW\*(C`line\*(C'\fR.
.PP
It can be used as a descriptive substitute for \f(CW\*(C`line\*(C'\fR in chart types such as Bar and Column that have a border and fill style rather than a line style. In general chart objects with a \f(CW\*(C`border\*(C'\fR property will also have a fill property.
.Sh "Fill"
.IX Subsection "Fill"
The fill format is used to specify filled areas of chart objects such as the interior of a column or the background of the chart itself.
.PP
The following properties can be set for \f(CW\*(C`fill\*(C'\fR formats in a chart.
.PP
.Vb 2
\&    none
\&    color
.Ve
.PP
The \f(CW\*(C`none\*(C'\fR property is used to turn the \f(CW\*(C`fill\*(C'\fR property off (it is generally on by default).
.PP
.Vb 4
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        fill       => { none => 1 },
\&    );
.Ve
.PP
The \f(CW\*(C`color\*(C'\fR property sets the colour of the \f(CW\*(C`fill\*(C'\fR area.
.PP
.Vb 4
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        fill       => { color => 'red' },
\&    );
.Ve
.PP
The available colours are shown in the main Excel::Writer::XLSX documentation. It is also possible to set the colour of a fill with a \s-1HTML\s0 style \s-1RGB\s0 colour:
.PP
.Vb 3
\&    $chart->add_series(
\&        fill       => { color => '#FF0000' },
\&    );
.Ve
.PP
The \f(CW\*(C`fill\*(C'\fR format is generally used in conjunction with a \f(CW\*(C`border\*(C'\fR format which has the same properties as a \f(CW\*(C`line\*(C'\fR format.
.PP
.Vb 5
\&    $chart->add_series(
\&        values     => '=Sheet1!$B$1:$B$5',
\&        border     => { color => 'red' },
\&        fill       => { color => 'yellow' },
\&    );
.Ve
.SH "CHART FONTS"
.IX Header "CHART FONTS"
The following font properties can be set for any chart object that they apply to (and that are supported by Excel::Writer::XLSX) such as chart titles, axis labels and axis numbering. They correspond to the equivalent Worksheet cell Format object properties. See \*(L"\s-1FORMAT_METHODS\s0\*(R" in Excel::Writer::XLSX for more information.
.PP
.Vb 7
\&    name
\&    size
\&    bold
\&    italic
\&    underline
\&    rotation
\&    color
.Ve
.PP
The following explains the available font properties:
.ie n .IP "* ""name""" 4
.el .IP "* \f(CWname\fR" 4
.IX Item "name"
Set the font name:
.Sp
.Vb 1
\&    $chart->set_x_axis( num_font => { name => 'Arial' } );
.Ve
.ie n .IP "* ""size""" 4
.el .IP "* \f(CWsize\fR" 4
.IX Item "size"
Set the font size:
.Sp
.Vb 1
\&    $chart->set_x_axis( num_font => { name => 'Arial', size => 10 } );
.Ve
.ie n .IP "* ""bold""" 4
.el .IP "* \f(CWbold\fR" 4
.IX Item "bold"
Set the font bold property, should be 0 or 1:
.Sp
.Vb 1
\&    $chart->set_x_axis( num_font => { bold => 1 } );
.Ve
.ie n .IP "* ""italic""" 4
.el .IP "* \f(CWitalic\fR" 4
.IX Item "italic"
Set the font italic property, should be 0 or 1:
.Sp
.Vb 1
\&    $chart->set_x_axis( num_font => { italic => 1 } );
.Ve
.ie n .IP "* ""underline""" 4
.el .IP "* \f(CWunderline\fR" 4
.IX Item "underline"
Set the font underline property, should be 0 or 1:
.Sp
.Vb 1
\&    $chart->set_x_axis( num_font => { underline => 1 } );
.Ve
.ie n .IP "* ""rotation""" 4
.el .IP "* \f(CWrotation\fR" 4
.IX Item "rotation"
Set the font rotation in the range \-90 to 90:
.Sp
.Vb 1
\&    $chart->set_x_axis( num_font => { rotation => 45 } );
.Ve
.Sp
This is useful for displaying large axis data such as dates in a more compact format.
.ie n .IP "* ""color""" 4
.el .IP "* \f(CWcolor\fR" 4
.IX Item "color"
Set the font color property. Can be a color index, a color name or \s-1HTML\s0 style \s-1RGB\s0 colour:
.Sp
.Vb 2
\&    $chart->set_x_axis( num_font => { color => 'red' } );
\&    $chart->set_y_axis( num_font => { color => '#92D050' } );
.Ve
.PP
Here is an example of Font formatting in a Chart program:
.PP
.Vb 8
\&    # Format the chart title.
\&    $chart->set_title(
\&        name      => 'Sales Results Chart',
\&        name_font => {
\&            name  => 'Calibri',
\&            color => 'yellow',
\&        },
\&    );
.Ve
.PP
.Vb 12
\&    # Format the X-axis.
\&    $chart->set_x_axis(
\&        name      => 'Month',
\&        name_font => {
\&            name  => 'Arial',
\&            color => '#92D050'
\&        },
\&        num_font => {
\&            name  => 'Courier New',
\&            color => '#00B0F0',
\&        },
\&    );
.Ve
.PP
.Vb 14
\&    # Format the Y-axis.
\&    $chart->set_y_axis(
\&        name      => 'Sales (1000 units)',
\&        name_font => {
\&            name      => 'Century',
\&            underline => 1,
\&            color     => 'red'
\&        },
\&        num_font => {
\&            bold   => 1,
\&            italic => 1,
\&            color  => '#7030A0',
\&        },
\&    );
.Ve
.SH "CHART LAYOUT"
.IX Header "CHART LAYOUT"
The position of the chart in the worksheet is controlled by the \f(CW\*(C`set_size()\*(C'\fR method shown above.
.PP
It is also possible to change the layout of the following chart sub\-objects:
.PP
.Vb 5
\&    plotarea
\&    legend
\&    title
\&    x_axis caption
\&    y_axis caption
.Ve
.PP
Here are some examples:
.PP
.Vb 8
\&    $chart->set_plotarea(
\&        layout => {
\&            x      => 0.35,
\&            y      => 0.26,
\&            width  => 0.62,
\&            height => 0.50,
\&        }
\&    );
.Ve
.PP
.Vb 8
\&    $chart->set_legend(
\&        layout => {
\&            x      => 0.80,
\&            y      => 0.37,
\&            width  => 0.12,
\&            height => 0.25,
\&        }
\&    );
.Ve
.PP
.Vb 7
\&    $chart->set_title(
\&        name   => 'Title',
\&        layout => {
\&            x => 0.42,
\&            y => 0.14,
\&        }
\&    );
.Ve
.PP
.Vb 7
\&    $chart->set_x_axis(
\&        name        => 'X axis',
\&        name_layout => {
\&            x => 0.34,
\&            y => 0.85,
\&        }
\&    );
.Ve
.PP
Note that it is only possible to change the width and height for the \f(CW\*(C`plotarea\*(C'\fR and \f(CW\*(C`legend\*(C'\fR objects. For the other text based objects the width and height are changed by the font dimensions.
.PP
The layout units must be a float in the range \f(CW\*(C`0 < x <= 1\*(C'\fR and are expressed as a percentage of the chart dimensions as shown below:
.PP
From this the layout units are calculated as follows:
.PP
.Vb 5
\&    layout:
\&        width  = w / W
\&        height = h / H
\&        x      = a / W
\&        y      = b / H
.Ve
.PP
These units are slightly cumbersome but are required by Excel so that the chart object positions remain relative to each other if the chart is resized by the user.
.PP
Note that for \f(CW\*(C`plotarea\*(C'\fR the origin is the top left corner in the plotarea itself and does not take into account the axes.
.SH "WORKSHEET METHODS"
.IX Header "WORKSHEET METHODS"
In Excel a chartsheet (i.e, a chart that isn't embedded) shares properties with data worksheets such as tab selection, headers, footers, margins, and print properties.
.PP
In Excel::Writer::XLSX you can set chartsheet properties using the same methods that are used for Worksheet objects.
.PP
The following Worksheet methods are also available through a non-embedded Chart object:
.PP
.Vb 8
\&    get_name()
\&    activate()
\&    select()
\&    hide()
\&    set_first_sheet()
\&    protect()
\&    set_zoom()
\&    set_tab_color()
.Ve
.PP
.Vb 6
\&    set_landscape()
\&    set_portrait()
\&    set_paper()
\&    set_margins()
\&    set_header()
\&    set_footer()
.Ve
.PP
See Excel::Writer::XLSX for a detailed explanation of these methods.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Here is a complete example that demonstrates some of the available features when creating a chart.
.PP
.Vb 1
\&    #!/usr/bin/perl
.Ve
.PP
.Vb 3
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
.Ve
.PP
.Vb 3
\&    my $workbook  = Excel::Writer::XLSX->new( 'chart.xlsx' );
\&    my $worksheet = $workbook->add_worksheet();
\&    my $bold      = $workbook->add_format( bold => 1 );
.Ve
.PP
.Vb 6
\&    # Add the worksheet data that the charts will refer to.
\&    my $headings = [ 'Number', 'Batch 1', 'Batch 2' ];
\&    my $data = [
\&        [ 2,  3,  4,  5,  6,  7 ],
\&        [ 10, 40, 50, 20, 10, 50 ],
\&        [ 30, 60, 70, 50, 40, 30 ],
.Ve
.PP
.Vb 1
\&    ];
.Ve
.PP
.Vb 2
\&    $worksheet->write( 'A1', $headings, $bold );
\&    $worksheet->write( 'A2', $data );
.Ve
.PP
.Vb 2
\&    # Create a new chart object. In this case an embedded chart.
\&    my $chart = $workbook->add_chart( type => 'column', embedded => 1 );
.Ve
.PP
.Vb 6
\&    # Configure the first series.
\&    $chart->add_series(
\&        name       => '=Sheet1!$B$1',
\&        categories => '=Sheet1!$A$2:$A$7',
\&        values     => '=Sheet1!$B$2:$B$7',
\&    );
.Ve
.PP
.Vb 7
\&    # Configure second series. Note alternative use of array ref to define
\&    # ranges: [ $sheetname, $row_start, $row_end, $col_start, $col_end ].
\&    $chart->add_series(
\&        name       => '=Sheet1!$C$1',
\&        categories => [ 'Sheet1', 1, 6, 0, 0 ],
\&        values     => [ 'Sheet1', 1, 6, 2, 2 ],
\&    );
.Ve
.PP
.Vb 4
\&    # Add a chart title and some axis labels.
\&    $chart->set_title ( name => 'Results of sample analysis' );
\&    $chart->set_x_axis( name => 'Test number' );
\&    $chart->set_y_axis( name => 'Sample length (mm)' );
.Ve
.PP
.Vb 2
\&    # Set an Excel chart style. Blue colors with white outline and shadow.
\&    $chart->set_style( 11 );
.Ve
.PP
.Vb 2
\&    # Insert the chart into the worksheet (with an offset).
\&    $worksheet->insert_chart( 'D2', $chart, 25, 10 );
.Ve
.PP
.Vb 1
\&    __END__
.Ve
.SH "Value and Category Axes"
.IX Header "Value and Category Axes"
Excel differentiates between a chart axis that is used for series \fBcategories\fR and an axis that is used for series \fBvalues\fR.
.PP
In the example above the X axis is the category axis and each of the values is evenly spaced. The Y axis (in this case) is the value axis and points are displayed according to their value.
.PP
Since Excel treats the axes differently it also handles their formatting differently and exposes different properties for each.
.PP
As such some of \f(CW\*(C`Excel::Writer::XLSX\*(C'\fR axis properties can be set for a value axis, some can be set for a category axis and some properties can be set for both.
.PP
For example the \f(CW\*(C`min\*(C'\fR and \f(CW\*(C`max\*(C'\fR properties can only be set for value axes and \f(CW\*(C`reverse\*(C'\fR can be set for both. The type of axis that a property applies to is shown in the \f(CW\*(C`set_x_axis()\*(C'\fR section of the documentation above.
.PP
Some charts such as \f(CW\*(C`Scatter\*(C'\fR and \f(CW\*(C`Stock\*(C'\fR have two value axes.
.PP
Date Axes are a special type of category axis which are explained below.
.SH "Date Category Axes"
.IX Header "Date Category Axes"
Date Category Axes are category axes that display time or date information. In Excel::Writer::XLSX Date Category Axes are set using the \f(CW\*(C`date_axis\*(C'\fR option:
.PP
.Vb 1
\&    $chart->set_x_axis( date_axis => 1 );
.Ve
.PP
In general you should also specify a number format for a date axis although Excel will usually default to the same format as the data being plotted:
.PP
.Vb 4
\&    $chart->set_x_axis(
\&        date_axis         => 1,
\&        num_format        => 'dd/mm/yyyy',
\&    );
.Ve
.PP
Excel doesn't normally allow minimum and maximum values to be set for category axes. However, date axes are an exception. The \f(CW\*(C`min\*(C'\fR and \f(CW\*(C`max\*(C'\fR values should be set as Excel times or dates:
.PP
.Vb 6
\&    $chart->set_x_axis(
\&        date_axis         => 1,
\&        min               => $worksheet->convert_date_time('2013-01-02T'),
\&        max               => $worksheet->convert_date_time('2013-01-09T'),
\&        num_format        => 'dd/mm/yyyy',
\&    );
.Ve
.PP
For date axes it is also possible to set the type of the major and minor units:
.PP
.Vb 8
\&    $chart->set_x_axis(
\&        date_axis         => 1,
\&        minor_unit        => 4,
\&        minor_unit_type   => 'months',
\&        major_unit        => 1,
\&        major_unit_type   => 'years',
\&        num_format        => 'dd/mm/yyyy',
\&    );
.Ve
.SH "Secondary Axes"
.IX Header "Secondary Axes"
It is possible to add a secondary axis of the same type to a chart by setting the \f(CW\*(C`y2_axis\*(C'\fR or \f(CW\*(C`x2_axis\*(C'\fR property of the series:
.PP
.Vb 1
\&    #!/usr/bin/perl
.Ve
.PP
.Vb 3
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
.Ve
.PP
.Vb 2
\&    my $workbook  = Excel::Writer::XLSX->new( 'chart_secondary_axis.xlsx' );
\&    my $worksheet = $workbook->add_worksheet();
.Ve
.PP
.Vb 4
\&    # Add the worksheet data that the charts will refer to.
\&    my $data = [
\&        [ 2,  3,  4,  5,  6,  7 ],
\&        [ 10, 40, 50, 20, 10, 50 ],
.Ve
.PP
.Vb 1
\&    ];
.Ve
.PP
.Vb 1
\&    $worksheet->write( 'A1', $data );
.Ve
.PP
.Vb 2
\&    # Create a new chart object. In this case an embedded chart.
\&    my $chart = $workbook->add_chart( type => 'line', embedded => 1 );
.Ve
.PP
.Vb 5
\&    # Configure a series with a secondary axis
\&    $chart->add_series(
\&        values  => '=Sheet1!$A$1:$A$6',
\&        y2_axis => 1,
\&    );
.Ve
.PP
.Vb 3
\&    $chart->add_series(
\&        values => '=Sheet1!$B$1:$B$6',
\&    );
.Ve
.PP
.Vb 2
\&    # Insert the chart into the worksheet.
\&    $worksheet->insert_chart( 'D2', $chart );
.Ve
.PP
.Vb 1
\&    __END__
.Ve
.PP
Note, it isn't currently possible to add a secondary axis of a different chart type (for example line and column).
.SH "TODO"
.IX Header "TODO"
The chart feature in Excel::Writer::XLSX is under active development. More chart types and features will be added in time.
.PP
Features that are on the \s-1TODO\s0 list and will be added are:
.IP "* Add more chart sub\-types." 4
.IX Item "Add more chart sub-types."
.PD 0
.IP "* Additional formatting options." 4
.IX Item "Additional formatting options."
.IP "* More axis controls." 4
.IX Item "More axis controls."
.IP "* 3D charts." 4
.IX Item "3D charts."
.IP "* Additional chart types such as Bubble or Doughnut." 4
.IX Item "Additional chart types such as Bubble or Doughnut."
.PD
.PP
If you are interested in sponsoring a feature to have it implemented or expedited let me know.
.SH "AUTHOR"
.IX Header "AUTHOR"
John McNamara jmcnamara@cpan.org
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright \s-1MM\-MMXIIII\s0, John McNamara.
.PP
All Rights Reserved. This module is free software. It may be used, redistributed and/or modified under the same terms as Perl itself.
